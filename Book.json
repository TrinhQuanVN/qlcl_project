{"": ["", ["2"], "root", []], "2": ["", ["3", "6", "9", "26", "27", "29", "30", "31"], "pysimplegui all element", [""]], "3": ["2", ["5", "4"], "All", ["Example of (almost) all Elements, that you can use in PySimpleGUI.\n    Shows you the basics including:\n        Naming convention for keys\n        Menubar format\n        Right click menu format\n        Table format\n        Running an async event loop\n        Theming your application (requires a window restart)\n        Displays the values dictionary entry for each element\n        And more!\n    Copyright 2021, 2022 PySimpleGUI"]], "4": ["3", [], "def make_window", ["def make_window(theme):"]], "5": ["3", [], "def main", ["def main():"]], "6": ["2", ["7"], "AllSimple", ["Demo - Element List\n    All elements shown in 1 window as simply as possible.\n    Copyright 2022 PySimpleGUI"]], "7": ["6", ["8"], "def make_window", ["def make_window(theme=None):"]], "8": ["7", [], "def name", ["def name(name):"]], "9": ["2", ["17", "21", "12", "14", "16", "11", "10", "13", "19", "18", "20", "25", "24", "23", "15", "22"], "BrowerStart", ["PySimpleGUI Demo Program Browser\n    Originaly written for PySimpleGUI Demo Programs, but expanded to\n    be a general purpose tool. Enable Advanced Mode in settings for more fun\n    \n    Use to filter and search your source code tree.\n        Then run or edit your files\n    Filter the list of :\n        * Search using filename\n        * Searching within the programs' source code (like grep)\n    \n    The basic file operations are\n        * Edit a file in your editor\n        * Run a file\n        * Filter file list\n        * Search in files\n        * Run a regular expression search on all files\n        * Display the matching line in a file\n    \n    Additional operations\n        * Edit this file in editor\n        \n    Keeps a \"history\" of the previously chosen folders to easy switching between projects\n                \n    Copyright 2021, 2022 PySimpleGUI.org"]], "10": ["9", [], "def get_file_list_dict", ["def get_file_list_dict():\n    Returns dictionary of files\n    Key is short filename\n    Value is the full filename and path\n    :return: Dictionary of demo files\n    :rtype: Dict[str:str]"]], "11": ["9", [], "def get_file_list", ["def get_file_list():\n    Returns list of filenames of files to display\n    No path is shown, only the short filename\n    :return: List of filenames\n    :rtype: List[str]"]], "12": ["9", [], "def get_demo_path", ["def get_demo_path():\n    Get the top-level folder path\n    :return: Path to list of files using the user settings for this file.  Returns folder of this file if not found\n    :rtype: str"]], "13": ["9", [], "def get_global_editor", ["def get_global_editor():\n    Get the path to the editor based on user settings or on PySimpleGUI's global settings\n    :return: Path to the editor\n    :rtype: str"]], "14": ["9", [], "def get_editor", ["def get_editor():\n    Get the path to the editor based on user settings or on PySimpleGUI's global settings\n    :return: Path to the editor\n    :rtype: str"]], "15": ["9", [], "def using_local_editor", ["def using_local_editor():"]], "16": ["9", [], "def get_explorer", ["def get_explorer():\n    Get the path to the file explorer program\n    :return: Path to the file explorer EXE\n    :rtype: str"]], "17": ["9", [], "def advanced_mode", ["def advanced_mode():\n    Returns True is advanced GUI should be shown\n    :return: True if user indicated wants the advanced GUI to be shown (set in the settings window)\n    :rtype: bool"]], "18": ["9", [], "def get_theme", ["def get_theme():\n    Get the theme to use for the program\n    Value is in this program's user settings. If none set, then use PySimpleGUI's global default theme\n    :return: The theme\n    :rtype: str"]], "19": ["9", [], "def get_line_number", ["def get_line_number(file_path, string, dupe_lines):"]], "20": ["9", [], "def kill_ascii", ["def kill_ascii(s):"]], "21": ["9", [], "def find_in_file", ["def find_in_file(string, demo_files_dict, regex=False, verbose=False, window=None, ignore_case=True, show_first_match=True):\n    Search through the demo files for a string.\n    The case of the string and the file contents are ignored\n    :param string: String to search for\n    :param verbose: if True print the FIRST match\n    :type verbose: bool\n    :param find_all_matches: if True, then return all matches in the dictionary\n    :type find_all_matches: bool\n    :return: List of files containing the string\n    :rtype: List[str]"]], "22": ["9", [], "def window_choose_line_to_edit", ["def window_choose_line_to_edit(filename, full_filename, line_num_list, match_list):"]], "23": ["9", [], "def settings_window", ["def settings_window():\n    Show the settings window.\n    This is where the folder paths and program paths are set.\n    Returns True if settings were changed\n    :return: True if settings were changed\n    :rtype: (bool)"]], "24": ["9", [], "def make_window", ["def make_window():\n    Creates the main window\n    :return: The main window object\n    :rtype: (sg.Window)"]], "25": ["9", [], "def main", ["def main():\n    The main program that contains the event loop.\n    It will call the make_window function to create the window."]], "26": ["2", [], "Graphing", [""]], "27": ["2", [], "Input", [""]], "28": ["34", [], "logging", [""]], "29": ["2", [], "MenuBar", [""]], "30": ["2", [], "Pane", [""]], "31": ["2", ["32", "33", "34"], "UserDefine", ["Demo - User Settings as a Database\n    The PySimpleGUI User Settings APIs are implemnted to look like a dictionary to the\n    user and utilize JSON files to store the data.  As a result, one \"key\" is used to \n    store and retrieve each \"setting\".  This capability cab be used to implement a\n    simple database.\n    \n    In this demo the User Settings file is used to store a user ID and data associated\n    with that ID.  Each User ID has a dictionary stored in the User Settings file. This\n    dictionary is built from the values dictionary of the window.  There is a map varaible\n    called data_map that translates between the two dictionaries.\n    \n    Copyright 2022 PySimpleGUI"]], "32": ["31", [], "def get_id_data", ["def get_id_data(user_setting, id):"]], "33": ["31", [], "def main", ["def main():"]], "34": ["31", ["35", "28"], "UserDefine2", ["Demo - User Setting API to save and load a window's contents\n    The PySimpleGUI \"User Settings API\" is a simple interface to JSON and Config Files.\n    If you're thinking of storying information in a JSON file, consider using the PySimpleGUI\n        User Settings API calls.  They make JSON files act like dictionaries.  There's no need\n        to load nor save as that's done for you.\n    There are 2 interfaces to the User Settings API.\n        1. Function calls - sg.user_settings\n        2. UserSettings Object - Uses a simple class interface\n    Note that using the Object/class interface does not require you to write a class.  If you're using\n    PySimpleGUI, you are already using many different objects.  The Elements & Window are objects.\n    In this demo, a UserSetting object is used to save the values from Input elements into a JSON file.\n    You can also re-loda the values from the JSON into your window.\n    Copyright 2022 PySimpleGUI"]], "35": ["34", [], "def main", ["def main():"]]}